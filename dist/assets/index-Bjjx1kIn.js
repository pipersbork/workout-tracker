import{initializeApp as Z}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";import{getAuth as ee,onAuthStateChanged as te,signInAnonymously as se}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";import{getFirestore as ne,doc as V,setDoc as oe,getDoc as re,updateDoc as ae}from"https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const a of r)if(a.type==="childList")for(const c of a.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function s(r){const a={};return r.integrity&&(a.integrity=r.integrity),r.referrerPolicy&&(a.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?a.credentials="include":r.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(r){if(r.ep)return;r.ep=!0;const a=s(r);fetch(r.href,a)}})();const e={userId:null,isDataLoaded:!1,userSelections:{goal:"hypertrophy",trainingAge:"beginner",daysPerWeek:4,dietaryStatus:"maintenance",style:"gym",onboardingCompleted:!1},settings:{units:"lbs",theme:"dark",progressionModel:"double",weightIncrement:5,restDuration:90,haptics:!0},allPlans:[],activePlanId:null,editingPlanId:null,currentView:{week:1,day:1},savedTemplates:[],currentViewName:"onboarding",onboarding:{currentStep:1,totalSteps:7},exercises:[],progressChart:null,volumeChart:null,e1rmChart:null,workoutTimer:{instance:null,elapsed:0,isRunning:!1,startTime:0,isWorkoutInProgress:!1},restTimer:{instance:null,remaining:0,isRunning:!1},workoutSummary:{suggestions:[],newPRs:0,totalVolume:0,totalSets:0,mesocycleStats:{}},workoutHistory:[],personalRecords:[],dailyCheckin:{sleep:8,stress:3},dailyCheckinHistory:[],feedbackState:{currentExercise:null,currentExerciseIndex:null,soreness:{},pump:{},jointPain:{}}},H={novice:{mv:4,mev:6,mav:10,mrv:12},beginner:{mv:6,mev:8,mav:12,mrv:15},intermediate:{mv:8,mev:10,mav:16,mrv:20},advanced:{mv:10,mev:12,mav:18,mrv:22}},$={generateIntraWorkoutRecommendation(t,n){if(!t.reps||!t.weight||t.rir===null)return"Enter weight, reps, and RIR to get a recommendation.";const{weightIncrement:s}=e.settings,o=n.targetRIR||3,a=t.rir-o;if(a>1)return`You were a bit light. Try increasing to ${t.weight+s} ${e.settings.units}`;if(a<-1){const c=Math.max(0,t.weight-s);return c===0?"Drop weight significantly to focus on form.":`That was very hard. Try decreasing to ${c} ${e.settings.units}`}return Math.abs(a)<=1?`Perfect! Stay at ${t.weight} ${e.settings.units} for the next set.`:"No recommendation at this time."},generateNewMesocycle(t,n,s){const{trainingAge:o,goal:r,daysPerWeek:a}=t,c=this._getSplitForDays(a),l=H[o]||H.beginner,m=this._calculateInitialWeeklyVolume(c.muscles,l.mev),d=this._buildWeekTemplate(c,m,n,t.style);return this._createFullMesocycle(d,s)},calculateNextWorkoutProgression(t,n){const{weightIncrement:s}=e.settings;t.exercises.forEach(o=>{const r=n.exercises.find(d=>d.exerciseId===o.exerciseId);if(!r)return;if(!o.sets||o.sets.length===0){r.targetLoad=o.targetLoad||null,r.targetReps=o.targetReps;return}const a=o.sets.filter(d=>d.rir!==null&&d.rir!==""&&d.weight>0);if(a.length===0){const d=o.sets.reduce((p,y)=>(y.weight||0)>(p.weight||0)?y:p,{weight:0}),u=o.sets.every(p=>(p.reps||0)>=o.targetReps);r.targetLoad=u?(d.weight||0)+s:d.weight,r.targetReps=o.targetReps;return}const c=a.reduce((d,u)=>d+u.rir,0)/a.length,l=o.targetRIR||3,m=o.sets.reduce((d,u)=>(u.weight||0)>(d.weight||0)?u:d,{weight:0});c>l+1?(r.targetLoad=m.weight+s,r.stallCount=0,console.log(`Progression: Increasing weight for ${r.name} due to low RIR.`)):c<l-1?(r.targetLoad=m.weight,r.stallCount=(r.stallCount||0)+1,r.stallCount>=2&&console.log(`Stall detected for ${r.name}. Suggesting deload or alternative.`),console.log(`Progression: Maintaining weight for ${r.name} due to high RIR.`)):(r.targetReps<12?(r.targetReps=(r.targetReps||8)+1,r.targetLoad=m.weight,console.log(`Progression: Increasing reps for ${r.name} due to optimal RIR.`)):(r.targetLoad=m.weight+s,r.targetReps=8,console.log(`Progression: Resetting reps and increasing weight for ${r.name}.`)),r.stallCount=0)})},_getSplitForDays(t){return t<=3?{name:"Full Body",days:{"Full Body A":["quads","chest","back","shoulders"],"Full Body B":["hamstrings","back","chest","biceps","triceps"],"Full Body C":["quads","shoulders","back","core"]},muscles:["chest","back","quads","hamstrings","shoulders","biceps","triceps","core"]}:t===4?{name:"Upper/Lower",days:{"Upper A":["chest","back","shoulders","biceps","triceps"],"Lower A":["quads","hamstrings","core"],"Upper B":["back","chest","shoulders","triceps","biceps"],"Lower B":["hamstrings","quads","core"]},muscles:["chest","back","quads","hamstrings","shoulders","biceps","triceps","core"]}:{name:"Push/Pull/Legs",days:{Push:["chest","shoulders","triceps"],Pull:["back","biceps"],Legs:["quads","hamstrings","core"]},muscles:["chest","back","quads","hamstrings","shoulders","biceps","triceps","core"]}},_calculateInitialWeeklyVolume(t,n){const s={};return t.forEach(o=>{s[o]=n}),s.biceps&&(s.biceps=Math.round(n*.75)),s.triceps&&(s.triceps=Math.round(n*.75)),s.core&&(s.core=Math.round(n*.75)),s},_buildWeekTemplate(t,n,s,o){const r=[],a=this._getEquipmentFilter(o);let c={...n};for(const l in t.days){const m=t.days[l],d={name:l,exercises:[]};m.forEach(u=>{if(c[u]>0){const p=this._selectExercisesForMuscleGroup(s,u,a,"Primary",1);p.length>0&&(d.exercises.push(...p),c[u]-=3)}}),m.forEach(u=>{for(;c[u]>0;){const p=this._selectExercisesForMuscleGroup(s,u,a,"Secondary",1);if(p.length>0)d.exercises.push(...p),c[u]-=3;else break}}),r.push(d)}return r},_selectExercisesForMuscleGroup(t,n,s,o,r){return t.filter(l=>l.muscle.toLowerCase()===n.toLowerCase()&&l.type===o&&(l.equipment.includes("bodyweight")||l.equipment.some(m=>s.includes(m)))).sort(()=>.5-Math.random()).slice(0,r).map(l=>({exerciseId:`ex_${l.name.replace(/\s+/g,"_")}`,name:l.name,muscle:l.muscle,type:l.type,targetSets:3,targetReps:8,targetRIR:3,targetLoad:null,sets:[],stallCount:0,note:""}))},_findAlternativeExercise(t,n){const s=t.replace("ex_","").replace(/_/g," "),o=n.find(a=>a.name===s);if(!o||!o.alternatives||o.alternatives.length===0)return null;const r=o.alternatives[0];return n.find(a=>a.name===r)||null},_createFullMesocycle(t,n){const s={weeks:{}};for(let o=1;o<=n;o++){s.weeks[o]={};const r=o===n,a=this._getRirForWeek(o,n);t.forEach((c,l)=>{const m=l+1,d=JSON.parse(JSON.stringify(c));d.completed=!1,d.exercises.forEach(u=>{u.targetRIR=a,r&&(u.targetSets=Math.ceil(u.targetSets/2))}),s.weeks[o][m]=d})}return s},_getRirForWeek(t,n){if(t===n)return 4;const s=(t-1)/(n-1);return s<.25?3:s<.5?2:s<.75?1:0},_getEquipmentFilter(t){return t==="gym"?["barbell","dumbbell","machine","cable","rack","bench","bodyweight","pullup-bar"]:t==="home"?["bodyweight","dumbbell","pullup-bar"]:["barbell","dumbbell","machine","cable","rack","bench","bodyweight","pullup-bar"]}};function ie(t){return typeof t!="string"||!window.DOMPurify?(console.error("DOMPurify is not available. Please make sure the script is loaded."),""):window.DOMPurify.sanitize(t,{USE_PROFILES:{html:!1}})}function ce(t,n,s,o,r,a,c){let l;return c===1?l=`e.g. ${r} reps @ ${a} RIR`:l=o?`${o.weight}x${o.reps}`:`e.g. ${r} reps`,`
        <div class="set-row slide-in-bottom" data-set-index="${n}" style="animation-delay: ${n*.05}s;">
            <div class="set-number">${n+1}</div>
            <div class="set-inputs-wrapper">
                <div class="set-inputs">
                    <input type="text" inputmode="decimal" class="weight-input" placeholder="${o?.weight||"-"}" value="${s.weight||""}" data-exercise-index="${t}" data-set-index="${n}">
                    <input type="text" inputmode="tel" class="rep-rir-input" placeholder="${l}" value="${s.rawInput||""}" data-exercise-index="${t}" data-set-index="${n}">
                </div>
                <div class="recommendation-text" data-exercise-index="${t}" data-set-index="${n}"></div>
            </div>
            <div class="set-actions">
            </div>
        </div>
    `}function g(t="light"){if(!navigator.vibrate||e.settings.haptics===!1)return;const n={light:[40],medium:[80],heavy:[120],success:[50,100,50],error:[100,50,100]};navigator.vibrate(n[t]||n.light)}function A(t=e.activePlanId){const n=e.allPlans.find(o=>o.id===t);if(!n||!n.weeks)return h("No Active Plan","You don't have an active workout plan. Please create one to get started."),!1;const s=Object.keys(n.weeks).sort((o,r)=>o-r);for(const o of s){const r=n.weeks[o],a=Object.keys(r).sort((c,l)=>c-l);for(const c of a)if(!r[c].completed)return e.currentView={week:parseInt(o),day:parseInt(c)},!0}return h("Plan Complete!","Congratulations! You've completed all the workouts in this plan. You can start a new one from the template portal.",[{text:"Go to Template Portal",class:"cta-button",action:()=>w("templatePortal")}]),!1}async function q(t,n,s,o=!1){g("medium");const r=/^\d+$/.test(s)?parseInt(s):s;e.userSelections[n]=r,t.closest(".card-group").querySelectorAll(".goal-card").forEach(a=>a.classList.remove("active")),t.classList.add("active"),o&&(await b("userSelections",e.userSelections),T("Settings saved!","✅"))}async function le(t){t!=="dark"&&t!=="light"||(g("light"),e.settings.theme=t,J(),await b("settings",e.settings),S())}async function de(t){t!=="lbs"&&t!=="kg"||(g("light"),e.settings.units=t,await b("settings",e.settings),S(),e.currentViewName==="workout"&&E())}async function ue(t){t!=="linear"&&t!=="double"||(g("light"),e.settings.progressionModel=t,await b("settings",e.settings),S())}async function me(t){[2.5,5,10].includes(t)&&(g("light"),e.settings.weightIncrement=t,await b("settings",e.settings),S())}async function ge(t){[60,90,120,180].includes(t)&&(g("light"),e.settings.restDuration=t,e.restTimer.remaining=t,await b("settings",e.settings),S(),e.currentViewName==="workout"&&D())}function pe(t){g("medium"),h("Delete Plan?","Are you sure you want to permanently delete this plan? This cannot be undone.",[{text:"Cancel",class:"secondary-button"},{text:"Yes, Delete",class:"cta-button",action:()=>he(t)}])}async function he(t){g("error"),e.allPlans=e.allPlans.filter(n=>n.id!==t),e.activePlanId===t&&(e.activePlanId=e.allPlans.length>0?e.allPlans[0].id:null),await k(),v(),S(),T("Plan deleted successfully!","🗑️")}async function fe(t){g("success"),e.activePlanId=t,await b("activePlanId",e.activePlanId),S(),T("Active plan set!","✅")}function we(){g("medium"),h("Complete Workout?","Are you sure you want to complete this workout? This action cannot be undone.",[{text:"Cancel",class:"secondary-button"},{text:"Yes, Complete",class:"cta-button",action:()=>Se()}])}function ye(t,n){return!t||!n||n<1?0:Math.round(n===1?t:t*(1+n/30))}function ve(t){let n=0;return t.exercises.forEach(s=>{if(!s.sets||s.sets.length===0)return;const o=s.sets.reduce((a,c)=>{if(!c.weight||!c.reps)return a;const l=ye(c.weight,c.reps);return l>a.e1rm?{...c,e1rm:l}:a},{e1rm:0});if(o.e1rm===0)return;const r=e.personalRecords.find(a=>a.exerciseId===s.exerciseId);if(!r||o.e1rm>r.e1rm){n++;const a={id:`pr_${s.exerciseId}_${Date.now()}`,exerciseId:s.exerciseId,exerciseName:s.name,date:new Date().toISOString(),weight:o.weight,reps:o.reps,e1rm:o.e1rm,units:e.settings.units};e.personalRecords=e.personalRecords.filter(c=>c.exerciseId!==s.exerciseId),e.personalRecords.push(a)}}),n}function ke(t,n){if(!n)return[];const s=[];return t.exercises.forEach(o=>{const r=n.exercises.find(l=>l.exerciseId===o.exerciseId);if(!r)return;if(r.stallCount>=2){s.push({exerciseName:r.name,suggestion:"You've stalled on this lift. Consider swapping it for an alternative to break through the plateau."});return}const a=o.sets.reduce((l,m)=>(m.weight||0)>(l.weight||0)?m:l,{weight:0});let c=`Maintain ${r.targetLoad||a.weight||"current"} ${e.settings.units} for ${r.targetReps} reps.`;r.targetLoad>(a.weight||0)?c=`Increase to <strong>${r.targetLoad} ${e.settings.units}</strong> for ${r.targetReps} reps.`:r.targetReps>o.targetReps&&(c=`Aim for <strong>${r.targetReps} reps</strong> with ${a.weight||"the same"} ${e.settings.units}.`),s.push({exerciseName:o.name,suggestion:c})}),s}function be(){const t=e.allPlans.find(o=>o.id===e.activePlanId);if(!t)return{total:0,completed:0,incomplete:0};let n=0,s=0;return Object.values(t.weeks).forEach(o=>{Object.values(o).forEach(r=>{r.exercises&&r.exercises.length>0&&(n++,r.completed&&s++)})}),{total:n,completed:s,incomplete:n-s}}async function Se(){g("success"),j(),v();const t=e.allPlans.findIndex(p=>p.id===e.activePlanId);if(t===-1)return;const n=e.allPlans[t],{week:s,day:o}=e.currentView,r=n.weeks[s][o];r.completed=!0,r.completedDate=new Date().toISOString(),e.workoutTimer.isWorkoutInProgress=!1;const a=ve(r);e.workoutSummary.newPRs=a;const c=e.workoutTimer.elapsed,l=r.exercises.reduce((p,y)=>p+(y.sets||[]).reduce((C,B)=>C+(B.weight||0)*(B.reps||0),0),0),m=r.exercises.reduce((p,y)=>p+(y.sets?.length||0),0);e.workoutSummary.totalVolume=l,e.workoutSummary.totalSets=m,e.workoutSummary.mesocycleStats=be();const d={id:`hist_${Date.now()}`,planId:n.id,planName:n.name,workoutName:r.name,completedDate:new Date().toISOString(),duration:c,volume:l,sets:m,exercises:JSON.parse(JSON.stringify(r.exercises))};e.workoutHistory.unshift(d);const u=n.weeks[s+1]?.[o];u?($.calculateNextWorkoutProgression(r,u),e.workoutSummary.suggestions=ke(r,u)):e.workoutSummary.suggestions=[],nt(a),A(),await k()}function xe(t){g("light");const n=i.weightChartContainer,s=i.e1rmChartContainer;document.querySelectorAll(".chart-toggle-switch .toggle-btn").forEach(r=>{r.classList.toggle("active",r.dataset.chartType===t)}),n.classList.toggle("hidden",t!=="weight"),s.classList.toggle("hidden",t!=="e1rm")}function Ie(){e.workoutTimer.isRunning||(e.workoutTimer.isRunning=!0,e.workoutTimer.startTime=Date.now()-e.workoutTimer.elapsed*1e3,e.workoutTimer.instance=setInterval(U,1e3))}function j(){e.workoutTimer.isRunning&&(e.workoutTimer.isRunning=!1,clearInterval(e.workoutTimer.instance),e.workoutTimer.elapsed=Math.floor((Date.now()-e.workoutTimer.startTime)/1e3),U())}function O(){g("light"),!e.restTimer.isRunning&&(R(),e.restTimer.isRunning=!0,e.restTimer.remaining=e.settings.restDuration,D(),e.restTimer.instance=setInterval(()=>{e.restTimer.remaining--,D(),e.restTimer.remaining<=0&&(R(),g("success"))},1e3))}function R(){clearInterval(e.restTimer.instance),e.restTimer.isRunning=!1,e.restTimer.remaining=e.settings.restDuration,D(),g("medium")}function Pe(t){const o=e.allPlans.find(a=>a.id===e.activePlanId).weeks[e.currentView.week][e.currentView.day].exercises[t],r=o.note||"";h(`Notes for ${o.name}`,`<textarea id="exercise-note-input" class="modal-input modal-textarea" placeholder="e.g., Felt strong, focus on form...">${r}</textarea>`,[{text:"Cancel",class:"secondary-button"},{text:"Save Note",class:"cta-button",action:()=>{const a=document.getElementById("exercise-note-input").value;o.note=ie(a),E(),v(),g("success"),T("Note saved!","📝")}}])}function Le(t){const n=e.exercises.find(o=>`ex_${o.name.replace(/\s+/g,"_")}`===t)?.name||"Exercise";let s="";e.workoutHistory.forEach(o=>{const r=o.exercises?.find(a=>a.exerciseId===t);r&&(r.sets?.length>0||r.note)&&(s+='<div class="history-item">',s+=`<div class="history-date">${new Date(o.completedDate).toLocaleDateString()} • ${o.workoutName}</div>`,r.note&&(s+=`<div class="history-note">"${r.note}"</div>`),(r.sets||[]).forEach((a,c)=>{a.weight&&a.reps&&(s+=`<div class="history-performance">Set ${c+1}: ${a.weight}${e.settings.units} × ${a.reps} reps</div>`)}),s+="</div>")}),s||(s='<p class="placeholder-text">No completed history for this exercise yet.</p>'),h(`${n} History`,s,[{text:"Close",class:"cta-button"}])}function Ee(){const t={userSelections:e.userSelections,settings:e.settings,allPlans:e.allPlans,workoutHistory:e.workoutHistory,personalRecords:e.personalRecords,savedTemplates:e.savedTemplates,dailyCheckinHistory:e.dailyCheckinHistory},n="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(t,null,2)),s=document.createElement("a");s.setAttribute("href",n),s.setAttribute("download","progression_backup_"+new Date().toISOString().slice(0,10)+".json"),document.body.appendChild(s),s.click(),s.remove(),h("Backup Complete!","Your workout data has been successfully downloaded. Keep this file safe!",[{text:"OK",class:"cta-button"}])}function Te(){h("Reset All Data?","Are you sure you want to permanently delete all your data and start over? This cannot be undone.",[{text:"Cancel",class:"secondary-button"},{text:"Yes, Reset",class:"cta-button",action:()=>Ce()}])}async function Ce(){g("error"),e.userSelections={goal:"hypertrophy",trainingAge:"beginner",daysPerWeek:4,dietaryStatus:"maintenance",style:"gym",onboardingCompleted:!1},e.settings={units:"lbs",theme:"dark",progressionModel:"double",weightIncrement:5,restDuration:90,haptics:!0},e.allPlans=[],e.activePlanId=null,e.editingPlanId=null,e.workoutHistory=[],e.personalRecords=[],e.dailyCheckinHistory=[],e.currentView={week:1,day:1},e.workoutTimer.isWorkoutInProgress=!1,await k(),v();let t=20;for(;!e.isDataLoaded&&t>0;)await new Promise(n=>setTimeout(n,250)),t--;w("onboarding")}function $e(t){for(const n of e.workoutHistory){const s=n.exercises?.find(o=>o.exerciseId===t);if(s&&s.sets&&s.sets.length>0){const o=s.sets.reduce((r,a)=>(a.weight||0)>(r.weight||0)?a:r,{weight:0});if(o.weight>0)return o}}return null}function Y(t){const n=document.querySelector(".step.active");n?(n.classList.add("fade-out"),setTimeout(()=>{t(),W()},500)):(t(),W())}function Re(t,n,s){q(t,n,s),setTimeout(K,250)}async function K(){Y(async()=>{if(e.onboarding.currentStep<e.onboarding.totalSteps&&e.onboarding.currentStep++,e.onboarding.currentStep===e.onboarding.totalSteps){const t=$.generateNewMesocycle(e.userSelections,e.exercises,4),n={id:`meso_${Date.now()}`,name:"My First Intelligent Plan",startDate:new Date().toISOString(),durationWeeks:4,...t};e.allPlans.push(n),e.activePlanId=n.id,e.userSelections.onboardingCompleted=!0,await k();let s=20;for(;!e.isDataLoaded&&s>0;)await new Promise(o=>setTimeout(o,250)),s--;e.isDataLoaded?(g("success"),h("Plan Generated!","Your first intelligent workout plan is ready. You can view it in settings or start your first workout from the home screen.",[{text:"Let's Go!",class:"cta-button",action:()=>{v(),w("home")}}])):h("Error","There was an error loading your data. Please refresh the page.",[{text:"Refresh",class:"cta-button",action:()=>window.location.reload()}])}})}function De(){Y(()=>{e.onboarding.currentStep>1&&e.onboarding.currentStep--})}async function Me(){g("success"),e.dailyCheckin.sleep=parseFloat(i.sleepSlider.value),e.dailyCheckin.stress=parseInt(i.stressSlider.value),e.dailyCheckinHistory.push({date:new Date().toISOString(),...e.dailyCheckin}),await b("dailyCheckinHistory",e.dailyCheckinHistory),z(),e.workoutTimer.isWorkoutInProgress=!0,e.workoutTimer.isRunning||Ie(),w("workout")}async function We(t){g("medium"),e.activePlanId=t,await b("activePlanId",e.activePlanId),A(t)&&(e.workoutTimer.isWorkoutInProgress?w("workout"):G())}function Ve(t){h("Coming Soon!","The plan editor is under development and will be available in a future update.")}function Ae(t){const o=e.allPlans.find(c=>c.id===e.activePlanId).weeks[e.currentView.week][e.currentView.day].exercises[t],r=e.exercises.find(c=>c.name===o.name);if(!r||!r.alternatives||r.alternatives.length===0){h("No Alternatives","Sorry, no alternatives are listed for this exercise.");return}const a=document.createElement("div");a.className="card-group vertical",r.alternatives.forEach(c=>{const l=document.createElement("div");l.className="goal-card alternative-card",l.dataset.action="selectAlternative",l.dataset.newExerciseName=c,l.dataset.exerciseIndex=t,l.setAttribute("role","button"),l.setAttribute("tabindex","0");const m=document.createElement("h3");m.textContent=c;const d=document.createElement("p"),u=$e(`ex_${c.replace(/\s+/g,"_")}`);u?d.textContent=`Last time: ${u.weight} ${e.settings.units} × ${u.reps}`:d.textContent="No recent history.",l.appendChild(m),l.appendChild(d),a.appendChild(l)}),h(`Swap ${o.name}`,a,[])}function Ne(t,n){g("success");const o=e.allPlans.find(c=>c.id===e.activePlanId).weeks[e.currentView.week][e.currentView.day],r=o.exercises[n],a=e.exercises.find(c=>c.name===t);a&&(o.exercises[n]={...r,name:a.name,muscle:a.muscle,exerciseId:`ex_${a.name.replace(/\s+/g,"_")}`,sets:[],stallCount:0,note:`Swapped from ${r.name}.`},E(),v())}function Be(){document.body.addEventListener("click",s=>{const o=s.target.closest("[data-action]");if(!o)return;o.classList.add("pop-animation"),o.addEventListener("animationend",()=>o.classList.remove("pop-animation"),{once:!0});const{action:r,...a}=o.dataset,c={nextOnboardingStep:K,previousOnboardingStep:De,selectOnboardingCard:()=>Re(o,a.field,a.value),showView:()=>{e.currentViewName==="workout"&&a.viewName!=="workout"&&(j(),R()),a.viewName==="workout"&&e.workoutTimer.isWorkoutInProgress?w("workout"):a.viewName==="workout"?A()&&G():w(a.viewName)},selectCard:()=>q(o,a.field,a.value,a.shouldSave==="true"),setTheme:()=>le(a.theme),setUnits:()=>de(a.unit),setProgressionModel:()=>ue(a.progression),setWeightIncrement:()=>me(parseFloat(a.increment)),setRestDuration:()=>ge(parseInt(a.duration)),setChartType:()=>xe(a.chartType),confirmDeletePlan:()=>pe(a.planId),setActivePlan:()=>fe(a.planId),startPlanWorkout:()=>We(a.planId),editPlan:()=>Ve(a.planId),confirmCompleteWorkout:we,closeModal:v,startRestTimer:O,stopRestTimer:R,submitCheckin:Me,addSet:()=>{g("light");const{exerciseIndex:l}=a,u=e.allPlans.find(C=>C.id===e.activePlanId).weeks[e.currentView.week][e.currentView.day].exercises[l];u.sets||(u.sets=[]);const p=u.sets.length,y=p>0?u.sets[p-1].weight:u.targetLoad||"";u.sets.push({weight:y,reps:"",rir:"",rawInput:""}),E()},swapExercise:()=>Ae(a.exerciseIndex),selectAlternative:()=>Ne(a.newExerciseName,a.exerciseIndex),openExerciseNotes:()=>Pe(a.exerciseIndex),showHistory:()=>Le(a.exerciseId)};c[r]&&c[r]()}),i.templatePortalView.addEventListener("click",s=>{const o=s.target.closest(".hub-option");if(!o)return;const r=o.dataset.hubAction;g("medium"),r==="new"&&h("Create New Plan?","This will generate a new intelligent plan based on your current settings. Are you sure?",[{text:"Cancel",class:"secondary-button"},{text:"Yes, Create",class:"cta-button",action:async()=>{g("success");const a=$.generateNewMesocycle(e.userSelections,e.exercises,4),c={id:`meso_${Date.now()}`,name:`Intelligent Plan - ${new Date().toLocaleDateString()}`,startDate:new Date().toISOString(),durationWeeks:4,...a};e.allPlans.push(c),e.activePlanId=c.id,await k(),v(),w("settings"),T("Plan created successfully!","🎯")}}]),r==="manage"&&w("settings"),(r==="premade"||r==="custom")&&h("Coming Soon!","This feature is currently under development.")});let t;const n=1e3;document.body.addEventListener("input",s=>{s.target.matches(".weight-input, .rep-rir-input")&&(clearTimeout(t),ot(),t=setTimeout(async()=>{const o=await k();rt(o)},n))}),document.body.addEventListener("keypress",s=>{if(s.key==="Enter"){const o=document.activeElement;if(o&&o.matches(".weight-input, .rep-rir-input")){const r=o.closest(".set-row"),a=r.nextElementSibling;if(a&&a.querySelector(".weight-input"))a.querySelector(".weight-input").focus();else{const c=r.closest(".sets-container").querySelector(".add-set-btn");c&&c.click()}}}}),document.addEventListener("keydown",s=>{i.modal.classList.contains("active")||(s.key==="n"&&e.currentViewName==="home"&&document.querySelector('#home-screen [data-view-name="workout"]').click(),s.key==="b"&&e.currentViewName!=="home"&&document.querySelector(".back-btn").click(),s.key==="c"&&e.currentViewName==="workout"&&document.querySelector("#complete-workout-btn").click())}),i.modal.addEventListener("click",s=>{(s.target.id==="modal"||s.target.id==="feedback-modal"||s.target.id==="daily-checkin-modal")&&(v(),tt(),z())}),i.workoutView.addEventListener("input",s=>{if(s.target.matches(".weight-input, .rep-rir-input")){if(s.target.classList.remove("valid","invalid"),s.target.value.trim()!==""){const d=s.target.checkValidity();s.target.classList.add(d?"valid":"invalid")}const{exerciseIndex:o,setIndex:r}=s.target.dataset,c=e.allPlans.find(d=>d.id===e.activePlanId)?.weeks[e.currentView.week][e.currentView.day];if(!c)return;const l=c.exercises[o];if(!l||!l.sets[r])return;const m=l.sets[r];if(s.target.classList.contains("weight-input"))m.weight=parseFloat(s.target.value)||"";else if(s.target.classList.contains("rep-rir-input")){const d=s.target.value.toLowerCase();m.rawInput=d;const u=d.match(/^(\d+)/),p=d.match(/r(\d+)/)||d.match(/(\d+)\s*rir/);if(m.reps=u?parseInt(u[1]):"",m.rir=p?parseInt(p[1]):"",m.weight&&m.reps){e.restTimer.isRunning||O();const y=$.generateIntraWorkoutRecommendation(m,l);et(parseInt(o),parseInt(r),y),parseInt(r)===l.targetSets-1&&setTimeout(()=>void 0,500)}}}}),i.workoutView.addEventListener("focusin",s=>{s.target.matches(".weight-input, .rep-rir-input")&&s.target.closest(".set-row").classList.add("active-set")}),i.workoutView.addEventListener("focusout",s=>{s.target.matches(".weight-input, .rep-rir-input")&&s.target.closest(".set-row").classList.remove("active-set")}),i.exerciseTrackerSelect?.addEventListener("change",s=>{const o=s.target.value;o&&(Ue(o),Ge(o))}),i.sleepSlider?.addEventListener("input",s=>{i.sleepLabel.textContent=`Sleep: ${s.target.value} hours`}),i.stressSlider?.addEventListener("input",s=>{i.stressLabel.textContent=`Stress Level: ${s.target.value}`}),document.body.addEventListener("mouseover",s=>{const o=s.target.closest("[data-tooltip]");o&&st(o)}),document.body.addEventListener("mouseout",s=>{s.target.closest("[data-tooltip]")&&X()}),document.getElementById("export-data-btn")?.addEventListener("click",()=>{g("light"),Ee()}),document.getElementById("reset-app-btn")?.addEventListener("click",()=>{g("heavy"),Te()})}const i={onboardingContainer:document.getElementById("onboarding-container"),homeScreen:document.getElementById("home-screen"),templatePortalView:document.getElementById("template-portal-view"),workoutView:document.getElementById("daily-workout-view"),performanceSummaryView:document.getElementById("performance-summary-view"),settingsView:document.getElementById("settings-view"),workoutSummaryView:document.getElementById("workout-summary-view"),modal:document.getElementById("modal"),feedbackModal:document.getElementById("feedback-modal"),dailyCheckinModal:document.getElementById("daily-checkin-modal"),exerciseListContainer:document.getElementById("exercise-list-container"),exerciseListLoader:document.getElementById("exercise-list-loader"),workoutStopwatchDisplay:document.getElementById("workout-stopwatch-display"),restTimerDisplay:document.getElementById("rest-timer-display"),exerciseTrackerSelect:document.getElementById("exercise-tracker-select"),weightChartContainer:document.getElementById("weight-chart-container"),e1rmChartContainer:document.getElementById("e1rm-chart-container"),sleepSlider:document.getElementById("sleep-slider"),stressSlider:document.getElementById("stress-slider"),sleepLabel:document.getElementById("sleep-label"),stressLabel:document.getElementById("stress-label"),homeWorkoutTitle:document.getElementById("home-workout-title"),homeWorkoutIcon:document.getElementById("home-workout-icon"),saveIndicator:document.getElementById("save-indicator"),offlineToast:document.getElementById("offline-toast"),toast:document.getElementById("toast"),toastMessage:document.getElementById("toast-message"),toastIcon:document.getElementById("toast-icon")};let f=null;function J(){document.body.setAttribute("data-theme",e.settings.theme)}function w(t,n=!1){const s={onboarding:i.onboardingContainer,home:i.homeScreen,templatePortal:i.templatePortalView,workout:i.workoutView,performanceSummary:i.performanceSummaryView,settings:i.settingsView,workoutSummary:i.workoutSummaryView};document.title=`Progression - ${t.charAt(0).toUpperCase()+t.slice(1)}`,Object.values(s).forEach(r=>{r&&(r.classList.add("hidden"),r.classList.remove("view"))});const o=s[t];if(o)switch(o.classList.remove("hidden"),o.classList.add("view"),e.currentViewName=t,t){case"onboarding":W();break;case"home":He();break;case"templatePortal":Fe();break;case"workout":E();break;case"performanceSummary":qe();break;case"settings":S();break;case"workoutSummary":Ze();break}}function He(){!i.homeWorkoutTitle||!i.homeWorkoutIcon||(e.workoutTimer.isWorkoutInProgress?(i.homeWorkoutTitle.textContent="Continue Workout",i.homeWorkoutIcon.textContent="▶️"):(i.homeWorkoutTitle.textContent="Start Next Workout",i.homeWorkoutIcon.textContent="▶️"))}function W(){const t=e.onboarding.currentStep,n=e.onboarding.totalSteps,s=document.getElementById("onboarding-progress");if(s){const r=t/n*100;s.style.width=`${r}%`}document.querySelectorAll(".step").forEach((r,a)=>{r.classList.remove("active","fade-out"),a+1===t&&r.classList.add("active")}),Oe()}function Oe(){Object.keys(e.userSelections).forEach(t=>{const n=e.userSelections[t];document.querySelectorAll(`[data-field="${t}"] .goal-card`).forEach(o=>{o.classList.remove("active"),o.dataset.value==n&&o.classList.add("active")})})}function Fe(){const t=document.getElementById("template-portal-options");t&&(t.innerHTML=`
        <div class="hub-option" data-hub-action="new" role="button" tabindex="0">
            <div class="hub-option-icon">🎯</div>
            <div class="hub-option-text">
                <h3>Generate New Plan</h3>
                <p>AI-powered plan based on your current settings</p>
            </div>
        </div>
        <div class="hub-option" data-hub-action="manage" role="button" tabindex="0">
            <div class="hub-option-icon">⚙️</div>
            <div class="hub-option-text">
                <h3>Manage My Plans</h3>
                <p>View, edit, and organize your workout plans</p>
            </div>
        </div>
        <div class="hub-option" data-hub-action="premade" role="button" tabindex="0">
            <div class="hub-option-icon">📋</div>
            <div class="hub-option-text">
                <h3>Browse Templates</h3>
                <p>Choose from proven, ready-made programs</p>
            </div>
        </div>
        <div class="hub-option" data-hub-action="custom" role="button" tabindex="0">
            <div class="hub-option-icon">🛠️</div>
            <div class="hub-option-text">
                <h3>Custom Builder</h3>
                <p>Build your own plan from scratch</p>
            </div>
        </div>
    `)}function E(){if(!e.activePlanId||!e.currentView)return;const t=e.allPlans.find(c=>c.id===e.activePlanId);if(!t)return;const{week:n,day:s}=e.currentView,o=t.weeks[n]?.[s];if(!o)return;const r=document.getElementById("workout-day-title"),a=document.getElementById("workout-date");r&&(r.textContent=o.name||`Week ${n}, Day ${s}`),a&&(a.textContent=new Date().toLocaleDateString()),i.exerciseListLoader&&i.exerciseListLoader.classList.remove("hidden"),i.exerciseListContainer&&(i.exerciseListContainer.style.display="none"),setTimeout(()=>{_e(o,n),i.exerciseListLoader&&i.exerciseListLoader.classList.add("hidden"),i.exerciseListContainer&&(i.exerciseListContainer.style.display="block")},500)}function _e(t,n){if(!i.exerciseListContainer)return;let s="";t.exercises.forEach((o,r)=>{const c=e.allPlans.find(l=>l.id===e.activePlanId)?.weeks[n-1]?.[e.currentView.day]?.exercises.find(l=>l.exerciseId===o.exerciseId);s+=`
            <div class="exercise-card ${o.stallCount>=2?"stalled":""}">
                <div class="exercise-card-header">
                    <div class="exercise-title-group">
                        <h3>${o.name}</h3>
                        ${o.stallCount>=2?'<span class="stall-indicator" title="This exercise has stalled">⚠️</span>':""}
                    </div>
                    <div style="display: flex; gap: 0.5rem;">
                        <button class="swap-exercise-btn" data-action="swapExercise" data-exercise-index="${r}" aria-label="Swap Exercise" data-tooltip="Swap Exercise">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 5v14M5 12h14"/></svg>
                        </button>
                        <button class="history-btn" data-action="showHistory" data-exercise-id="${o.exerciseId}" aria-label="View History" data-tooltip="View History">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                        </button>
                        <button class="note-btn ${o.note?"has-note":""}" data-action="openExerciseNotes" data-exercise-index="${r}" aria-label="Exercise Notes" data-tooltip="Exercise Notes">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                        </button>
                    </div>
                </div>
                <div class="sets-container">
                    <div class="set-row header">
                        <div class="set-number">Set</div>
                        <div class="set-inputs-wrapper">
                            <div class="set-inputs">
                                <span>Weight (${e.settings.units})</span>
                                <span>Reps & RIR</span>
                            </div>
                        </div>
                    </div>
        `;for(let l=0;l<o.targetSets;l++){const m=o.sets[l]||{weight:"",rawInput:""},d=c?.sets[l];s+=ce(r,l,m,d,o.targetReps,o.targetRIR,n)}s+=`
                    <button class="add-set-btn" data-action="addSet" data-exercise-index="${r}" aria-label="Add Set">+ Add Set</button>
                </div>
            </div>
        `}),i.exerciseListContainer.innerHTML=s}function qe(){je(),Ye(),Ke(),Je(),ze()}function je(){const t=document.getElementById("trophy-case-list");if(!t)return;if(e.personalRecords.length===0){t.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">🏆</div>
                <h4 class="empty-state-title">No Personal Records yet!</h4>
                <p class="empty-state-text">Complete workouts to start building your trophy case.</p>
            </div>
        `;return}const n=e.personalRecords.sort((s,o)=>new Date(o.date)-new Date(s.date));t.innerHTML=n.map(s=>`
        <div class="pr-item">
            <div class="pr-exercise-name">${s.exerciseName}</div>
            <div class="pr-details">
                <div class="pr-lift">${s.weight}${s.units} × ${s.reps}</div>
                <div class="pr-e1rm">Est. 1RM: ${s.e1rm}${s.units}</div>
            </div>
            <div class="pr-date">${new Date(s.date).toLocaleDateString()}</div>
        </div>
    `).join("")}function Ye(){const t=document.getElementById("consistency-calendar");if(!t)return;const n=new Date;new Date(n.getTime()-720*60*60*1e3);let s='<div class="calendar-header">Last 30 Days</div>';["S","M","T","W","T","F","S"].forEach(r=>{s+=`<div class="calendar-day-name">${r}</div>`});for(let r=29;r>=0;r--){const a=new Date(n.getTime()-r*24*60*60*1e3),c=a.toISOString().split("T")[0],l=e.workoutHistory.some(m=>m.completedDate.startsWith(c));s+=`<div class="calendar-day ${l?"completed":""}">${a.getDate()}</div>`}t.innerHTML=s}function Ke(){const t=document.getElementById("volume-chart-container");t&&(e.workoutHistory.length,t.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">📊</div>
                <p class="empty-state-text">Charts will be available in a future update.</p>
            </div>
        `)}function Je(){if(!i.exerciseTrackerSelect)return;const t=new Set;e.workoutHistory.forEach(s=>{s.exercises.forEach(o=>{o.sets&&o.sets.length>0&&t.add(o.name)})});const n=Array.from(t).sort();i.exerciseTrackerSelect.innerHTML=`
        <option value="">Select an exercise...</option>
        ${n.map(s=>`<option value="${s}">${s}</option>`).join("")}
    `,n.length===0&&(i.weightChartContainer&&(i.weightChartContainer.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">📈</div>
                <p class="empty-state-text">Track your progress here after you complete a workout!</p>
            </div>
        `),i.e1rmChartContainer&&(i.e1rmChartContainer.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">📈</div>
                <p class="empty-state-text">Track your E1RM here after you complete a workout!</p>
            </div>
        `))}function Ue(t){console.log(`Rendering progress chart for ${t}`)}function Ge(t){console.log(`Rendering E1RM chart for ${t}`)}function ze(){const t=document.getElementById("workout-history-list");if(!t)return;if(e.workoutHistory.length===0){t.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">📖</div>
                <h4 class="empty-state-title">No Workout History yet.</h4>
                <p class="empty-state-text">Complete a workout to see your history here!</p>
            </div>
        `;return}const n=e.workoutHistory.slice(0,10);t.innerHTML=n.map(s=>`
        <div class="summary-item">
            <div>
                <h4>${s.workoutName}</h4>
                <p>${new Date(s.completedDate).toLocaleDateString()} • ${Math.floor(s.duration/60)}min</p>
            </div>
            <div style="text-align: right;">
                <h4>${s.volume.toLocaleString()} ${e.settings.units}</h4>
                <p>${s.sets} sets</p>
            </div>
        </div>
    `).join("")}function S(){Xe(),Qe()}function Xe(){const t=document.getElementById("plan-management-list");if(t){if(e.allPlans.length===0){t.innerHTML=`
            <div class="empty-state">
                <div class="empty-state-icon">🎯</div>
                <h4 class="empty-state-title">No Plans yet.</h4>
                <p class="empty-state-text">Create your first plan to get started.</p>
            </div>
        `;return}t.innerHTML=e.allPlans.map(n=>`
        <div class="plan-item ${n.id===e.activePlanId?"active":""}">
            <div class="plan-name-text" data-action="setActivePlan" data-plan-id="${n.id}" role="button" tabindex="0" aria-label="Set ${n.name} as active plan">
                ${n.name}
            </div>
            <div class="plan-actions">
                <button class="plan-btn secondary-button" data-action="startPlanWorkout" data-plan-id="${n.id}" aria-label="Start ${n.name}">Start</button>
                <button class="plan-btn secondary-button" data-action="editPlan" data-plan-id="${n.id}" aria-label="Edit ${n.name}">Edit</button>
                <button class="plan-btn secondary-button" data-action="confirmDeletePlan" data-plan-id="${n.id}" aria-label="Delete ${n.name}">Delete</button>
            </div>
        </div>
    `).join("")}}function Qe(){F("settings-goal-cards","goal",e.userSelections.goal),F("settings-experience-cards","trainingAge",e.userSelections.trainingAge),P("progression-model-switch",e.settings.progressionModel),P("weight-increment-switch",e.settings.weightIncrement),P("rest-duration-switch",e.settings.restDuration),P("units-switch",e.settings.units),P("theme-switch",e.settings.theme)}function F(t,n,s){const o=document.getElementById(t);if(!o)return;o.querySelectorAll(".goal-card").forEach(a=>{a.classList.remove("active"),a.dataset.value==s&&a.classList.add("active")})}function P(t,n){const s=document.getElementById(t);if(!s)return;s.querySelectorAll(".toggle-btn").forEach(r=>{r.classList.remove("active"),(r.dataset.progression||r.dataset.increment||r.dataset.duration||r.dataset.unit||r.dataset.theme)==n&&r.classList.add("active")})}function Ze(){const t=e.workoutSummary;x("summary-time",L(e.workoutTimer.elapsed)),x("summary-volume",`${t.totalVolume.toLocaleString()} ${e.settings.units}`),x("summary-sets",t.totalSets),x("summary-prs",t.newPRs),x("summary-meso-completed",t.mesocycleStats.completed||0),x("summary-meso-incomplete",t.mesocycleStats.incomplete||0);const n=document.getElementById("summary-progression-list");n&&(t.suggestions.length===0?n.innerHTML='<p class="placeholder-text">No suggestions right now. Great work!</p>':n.innerHTML=t.suggestions.map(s=>`
                <div class="summary-item">
                    <h4>${s.exerciseName}</h4>
                    <p>${s.suggestion}</p>
                </div>
            `).join(""))}function x(t,n){const s=document.getElementById(t);s&&(s.textContent=n)}function L(t){const n=Math.floor(t/60),s=t%60;return`${n.toString().padStart(2,"0")}:${s.toString().padStart(2,"0")}`}function U(){if(i.workoutStopwatchDisplay)if(e.workoutTimer.isRunning){const t=Math.floor((Date.now()-e.workoutTimer.startTime)/1e3);e.workoutTimer.elapsed=t,i.workoutStopwatchDisplay.textContent=L(t),document.title=`Workout - ${L(t)}`}else i.workoutStopwatchDisplay.textContent=L(e.workoutTimer.elapsed)}function D(){if(!i.restTimerDisplay)return;const t=Math.max(0,e.restTimer.remaining);i.restTimerDisplay.textContent=L(t),t===0&&e.restTimer.isRunning?i.restTimerDisplay.style.color="var(--color-state-success)":i.restTimerDisplay.style.color="var(--color-accent-primary)"}function et(t,n,s){const o=document.querySelector(`[data-exercise-index="${t}"][data-set-index="${n}"].recommendation-text`);o&&s&&(o.textContent=s,o.style.color="var(--color-accent-secondary)",o.style.fontSize="0.85rem",o.style.marginTop="0.5rem")}function h(t,n,s=[]){if(!i.modal)return;const o=document.getElementById("modal-body"),r=document.getElementById("modal-actions");o&&(o.innerHTML=typeof n=="string"?`<h2>${t}</h2><div>${n}</div>`:`<h2>${t}</h2>`,typeof n!="string"&&o.appendChild(n)),r&&(r.innerHTML=s.map(a=>`<button class="${a.class}" ${a.action?`onclick="(${a.action.toString()})()"`:'data-action="closeModal"'}>${a.text}</button>`).join("")),i.modal.classList.add("active")}function v(){i.modal&&i.modal.classList.remove("active")}function tt(){i.feedbackModal&&i.feedbackModal.classList.remove("active")}function G(){i.dailyCheckinModal&&i.dailyCheckinModal.classList.add("active")}function z(){i.dailyCheckinModal&&i.dailyCheckinModal.classList.remove("active")}function st(t){const n=t.getAttribute("data-tooltip");if(!n)return;X(),f=document.createElement("div"),f.className="tooltip active",f.textContent=n,document.body.appendChild(f);const s=t.getBoundingClientRect();f.style.left=s.left+s.width/2-f.offsetWidth/2+"px",f.style.top=s.top-f.offsetHeight-10+"px"}function X(){f&&(f.remove(),f=null)}function T(t,n){i.toastMessage.textContent=t,i.toastIcon.innerHTML=n,i.toast.classList.remove("hidden"),i.toast.classList.add("show"),setTimeout(()=>{i.toast.classList.remove("show"),i.toast.classList.add("hidden")},3e3)}function nt(t){const n=t>0?"🎉 PRs Achieved!":"Workout Complete!",s=t>0?`Congratulations! You hit <strong>${t} new Personal Record${t>1?"s":""}</strong> today! Keep up the great work.`:"You crushed your workout! You can check out your progress in the Performance Summary.";h(n,s,[{text:"View Summary",class:"cta-button",action:()=>w("workoutSummary")}])}function M(t){t?i.offlineToast.classList.add("visible"):i.offlineToast.classList.remove("visible")}function ot(){i.saveIndicator&&(i.saveIndicator.classList.add("active"),i.saveIndicator.textContent="Saving...")}function rt(t){i.saveIndicator&&(i.saveIndicator.textContent=t?"Saved!":"Save Error",i.saveIndicator.classList.remove("active"),i.saveIndicator.classList.add(t?"success":"error"),setTimeout(()=>{i.saveIndicator.classList.remove("success","error"),i.saveIndicator.textContent=""},3e3))}const at={apiKey:"AIzaSyDSInOWrqR-AF2V8tv3vXIelnMCWROXKww",authDomain:"progression-700a3.firebaseapp.com",projectId:"progression-700a3",storageBucket:"progression-700a3.firebasestorage.app",messagingSenderId:"525938060953",appId:"1:525938060953:web:e453db795cd89aabc15208"},Q=Z(at),_=ee(Q),N=ne(Q),I="progressionAppState";async function k(){if(!e.userId)return;const t={userSelections:e.userSelections,settings:e.settings,allPlans:e.allPlans,savedTemplates:e.savedTemplates,activePlanId:e.activePlanId,currentView:e.currentView,workoutHistory:e.workoutHistory,personalRecords:e.personalRecords,isWorkoutInProgress:e.workoutTimer.isWorkoutInProgress};try{const n=JSON.parse(localStorage.getItem(I)||"{}");n[e.userId]=t,localStorage.setItem(I,JSON.stringify(n))}catch(n){console.error("Error saving full state to localStorage:",n)}try{const n=V(N,"users",e.userId);return await oe(n,t),!0}catch(n){return console.error("Error saving full state to Firestore:",n),h("Sync Error","Could not save your data to the cloud. You may be offline or have a permissions issue.",[{text:"OK",class:"cta-button"}]),!1}}async function b(t,n){if(e.userId){try{const s=JSON.parse(localStorage.getItem(I)||"{}");s[e.userId]&&(s[e.userId][t]=n,localStorage.setItem(I,JSON.stringify(s)))}catch(s){console.error(`Error updating '${t}' in localStorage:`,s)}try{const s=V(N,"users",e.userId);return await ae(s,{[t]:n}),!0}catch(s){return console.error(`Error updating '${t}' in Firestore:`,s),h("Sync Error","Could not update your settings. You may be offline or have a permissions issue.",[{text:"OK",class:"cta-button"}]),!1}}}async function it(){if(e.userId){try{const t=localStorage.getItem(I);if(t){const s=JSON.parse(t)[e.userId];s&&(e.userSelections={...e.userSelections,...s.userSelections},e.settings={...e.settings,...s.settings},e.allPlans=s.allPlans||[],e.savedTemplates=s.savedTemplates||[],e.activePlanId=s.activePlanId||(e.allPlans.length>0?e.allPlans[0].id:null),e.currentView=s.currentView||e.currentView,e.workoutHistory=s.workoutHistory||[],e.personalRecords=s.personalRecords||[],e.workoutTimer.isWorkoutInProgress=s.isWorkoutInProgress||!1,await k())}}catch(t){console.error("Error loading state from localStorage:",t),localStorage.removeItem(I)}{const t=V(N,"users",e.userId);try{const n=await re(t);if(n.exists()){const s=n.data();e.userSelections={...e.userSelections,...s.userSelections},e.settings={...e.settings,...s.settings},e.allPlans=s.allPlans||[],e.savedTemplates=s.savedTemplates||[],e.activePlanId=s.activePlanId||(e.allPlans.length>0?e.allPlans[0].id:null),e.currentView=s.currentView||e.currentView,e.workoutHistory=s.workoutHistory||[],e.personalRecords=s.personalRecords||[],e.workoutTimer.isWorkoutInProgress=s.isWorkoutInProgress||!1,await k()}else await k()}catch(n){console.error("Error loading state from Firestore:",n),h("Data Load Error","Could not load your saved data. Please check your connection and refresh the page.",[{text:"Refresh",class:"cta-button",action:()=>window.location.reload()}])}}e.isDataLoaded=!0}}function ct(t){te(_,async n=>{n?(e.userId=n.uid,await it(),t&&t()):se(_).catch(s=>{console.error("Anonymous sign-in failed:",s),h("Authentication Error","Could not sign in. Please check your connection and try again.")})})}async function lt(){try{const t=await fetch("exercises.json");if(!t.ok)throw new Error(`Network response was not ok: ${t.statusText}`);e.exercises=await t.json()}catch(t){console.error("Failed to load exercises.json:",t),h("Error Loading Data","Could not load the necessary exercise data. The app may not function correctly. Please check your connection and refresh the page.",[{text:"OK",class:"cta-button"}])}}window.onerror=function(t,n,s,o,r){return console.error("A global error was caught:",{message:t,source:n,lineno:s,colno:o,error:r}),h("An Unexpected Error Occurred","Sorry, something went wrong. Please refresh the page. If the problem persists, please contact support.",[{text:"Refresh",class:"cta-button",action:()=>window.location.reload()}]),!0};document.addEventListener("DOMContentLoaded",async()=>{"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/service-worker.js").then(t=>{console.log("ServiceWorker registration successful with scope: ",t.scope)}).catch(t=>{console.log("ServiceWorker registration failed: ",t)})}),Be(),window.addEventListener("online",()=>M(!1)),window.addEventListener("offline",()=>M(!0)),M(!navigator.onLine),await lt(),ct(()=>{J();let t="onboarding";e.userSelections.onboardingCompleted&&(t=e.workoutTimer.isWorkoutInProgress?"workout":"home"),w(t,!0)})});
