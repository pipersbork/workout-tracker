rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId
                          && isDataStructureValid(request.resource.data);
    }
  }
}

function isDataStructureValid(data) {
  return data.keys().hasAll([
    'userSelections', 'settings', 'allPlans', 'activePlanId',
    'workoutHistory', 'personalRecords', 'currentView', 'savedTemplates'
  ])
  && data.userSelections.keys().hasAll([
    'goal', 'trainingAge', 'daysPerWeek', 'dietaryStatus', 'style', 'onboardingCompleted'
  ])
  && data.settings.keys().hasAll([
    'units', 'theme', 'progressionModel', 'weightIncrement', 'restDuration', 'haptics'
  ])
  // Type and value checks for user selections
  && data.userSelections.goal in ['hypertrophy', 'strength', 'fatLoss']
  && data.userSelections.trainingAge in ['novice', 'beginner', 'intermediate', 'advanced']
  && data.userSelections.daysPerWeek in [3, 4, 5, 6]
  && data.userSelections.dietaryStatus in ['surplus', 'maintenance', 'deficit']
  && data.userSelections.style in ['gym', 'home']
  && data.userSelections.onboardingCompleted is bool
  // Type and value checks for settings
  && data.settings.units in ['lbs', 'kg']
  && data.settings.theme in ['dark', 'light']
  && data.settings.progressionModel in ['linear', 'double']
  && data.settings.weightIncrement in [2.5, 5, 10]
  && data.settings.restDuration in [60, 90, 120, 180]
  && data.settings.haptics is bool
  // Type checks for root-level fields
  && (data.activePlanId is string || data.activePlanId == null)
  && data.allPlans is list
  && data.workoutHistory is list
  && data.personalRecords is list
  // Deep validation for nested objects in lists
  && (data.allPlans.size() == 0 || data.allPlans.all(plan =>
      plan.id is string
      && plan.name is string
      && plan.startDate is string
      && plan.durationWeeks is number
      && plan.weeks is map
  ))
  && (data.workoutHistory.size() == 0 || data.workoutHistory.all(entry =>
      entry.id is string
      && entry.planId is string
      && entry.planName is string
      && entry.workoutName is string
      && entry.completedDate is string
      && entry.duration is number
      && entry.volume is number
      && entry.sets is number
      && entry.exercises is list
  ))
  && (data.personalRecords.size() == 0 || data.personalRecords.all(pr =>
      pr.id is string
      && pr.exerciseId is string
      && pr.exerciseName is string
      && pr.date is string
      && pr.weight is number
      && pr.reps is number
      && pr.e1rm is number
      && pr.units in ['lbs', 'kg']
  ));
}
